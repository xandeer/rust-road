* Generic Data Types

We can use generics to create definitions for items like function signatures or
structs, which we can then use with many different concrete data types. Let's
first look at how to define functions, structs, enums, and methods using
generics. Then we'll discuss how generics affect code performance.

** In Function Definitions

When defining a function that uses generics, we place the generics in the
signature othe function where we would usually specify the data types of the
parameters and return value. Doing so mas our  more flexible and provides more
functionality to callers of our function while preventing code duplication.

Continuing with our =largest= function, below shows two functions that both find
the largest value in a slice.

#+BEGIN_SRC rust :tangle src/fn1.rs
fn largest_i32(list: &[i32]) -> i32 {
    let mut largest = list[0];

    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn largest_char(list: &[char]) -> char {
    let mut largest = list[0];

    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 24, 100, 99];

    let result = largest_i32(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['a', 'n', 'd', 'i'];

    let result = largest_char(&char_list);
    println!("The largest number is {}", result);
}
#+END_SRC

#+BEGIN_SRC sh :results raw
cargo run --bin fn1
#+END_SRC

#+RESULTS:
The largest number is 100
The largest number is n

The function bodies have the same code, so let's eliminate the duplication by
introducing a generic type parameter in a single function.

To parameterize the types in the new function we'll define, we need to name the
type parameter, just as we do for the value parameters to afunction. You can use
any identifier as a type parameter name. But we'll use =T= because, by
convention, parameter names is Rust are short, often just a letter, and Rust's
type-naming convention is CamelCase. Short for "type", =T= is the default choice
of most Rust programmers.

When we use a parameter in the body of the function, we have to declare the
parameter name in the signature so the compiler knows what that name means.
Similarly, when we use a type parameter name in a function signature, we have to
declare the type parameter name before we use it. To define the generic
=largest= function, place type name declarations inside angle brackets, =<>=,
between the name of the function and the parameter list, like this:

#+BEGIN_SRC rust
fn largest<T>(list: &[T]) -> T
#+END_SRC

We read this definition as: the function =largest= is generic over some type
=T=. This function has one parameter named =list=, which is a slice of values of
type =T=. The =largest= function will return a value of the same type =T=.

Below shows the combined =largest= function definition using the generic data
type in its signature. The listing also shows how we can call the function with
either a slice of =i32= values or =cahr= values. Note that this code won't
compile yet, but we'll x it later in this chapter.

#+BEGIN_SRC rust :tangle src/fn2.rs
fn largest<T>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 24, 100, 99];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['a', 'n', 'd', 'i'];

    let result = largest(&char_list);
    println!("The largest number is {}", result);
}
#+END_SRC

#+BEGIN_SRC sh :results none
cargo run --bin fn2
#+END_SRC

If we compile this code right now, we'll get this error:

#+BEGIN_EXAMPLE
error[E0369]: binary operation `>` cannot be applied to type `T`
 --> src/fn2.rs:5:17
  |
5 |         if item > largest {
  |            ---- ^ ------- T
  |            |
  |            T
  |
  = note: `T` might need a bound for `std::cmp::PartialOrd`

#+END_EXAMPLE

The note mentions =std::cmp::PartialOrd=, which is a /trait/. We'll talk about
traits in the next section. For now, this error states that the body of
=largest= won't work for all possible types that =T= could be. Because we want
to compare values of type =T= in the body, we can only use types whose values
can be ordered. To enable comparisons, the standard library has the
=std::cmp:PartialOrd= trait that you can implement on the types. You'll learn
how to specify that a generic type has a particular trait in "Traits as
Parameters" section, but let's first explore other ways of using generic type
parameters.

** In Struct Definitions

We can also define structs to use a generic type parameter in one or more fields
using the =<>= syntax. Below shows how to define a =Point<T>= struct to hold =x=
and =y= coordinate values of any type.

#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}

fn main () {
    let integer = Point { x: 5, y: 9 };
    let float = Point { x: 1.2, y: 8.2 };
}
#+END_SRC

The syntax for using generics in struct definitions is similar to that used in
function definitions. First, we declare the name of the type parameter inside
angle brackets just after the name of the struct. Then we can use the generic
type in the struct definition where we would otherwise specify concrete data
types.

Note that because we've used only one generic type to define =Point<T>=, this
definition says that the =Point<T>= struct is generic over some type =T=, and
the fields =x= and =y= are both that the same type, whatever that type may be.
If we create an instance of a =Point<T>= that has values of different types, as
in below, our code won't compile.

#+BEGIN_SRC rust :tangle src/struct.rs
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let wont_work = Point { x: 2, y: 3.4 };
}
#+END_SRC

In this example, when we assign the integer value to =x=, we let the compiler
know that the generic type =T= will be an integer for this instance of
=Point<T>=. Then when we specify 3.4 for =y=, which we've defined to have the
same type as =x=, we'll get a type mismatch error like this:

#+BEGIN_SRC sh :results none
cargo run --bin struct
#+END_SRC

#+BEGIN_EXAMPLE
error[E0308]: mismatched types
 --> src/struct.rs:7:38
  |
7 |     let wont_work = Point { x: 2, y: 3.4 };
  |                                      ^^^ expected integer, found floating-point number
  |
  = note: expected type `{integer}`
             found type `{float}`
#+END_EXAMPLE

To define a =Point= struct where =x= and =y= are both generics but could have
diffecrent types, we can use multiple generic type parameters. For example, we
can change the definition of =Point= to be generic over types =T= and =U= where
=x= is of type =T= and =y= is of type =U=.

#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 3, y: 8 };
    let both_float = Point { x: 3.2, y: 9.3 };
    let integer_and_float = Point { x: 3, y: 9.3 };
}
#+END_SRC

Now all the instances of =Point= shown are allowed! You can use as many generic
type parameters in a definition as you want, but using more than a few makes
your code hard to read. When you need lots of generic types in your code, it
could indicate that your code needs restructuring into smaller pieces.

** In Enum Definitions

As we did with structs, we can define enums to hold generic data types in their
variants. Let's take another look at the =Option<T>= enum that the standard
library provides.

#+BEGIN_SRC rust
enum Option<T> {
    Some(T),
    None,
}
#+END_SRC

Enums can use multiple generic types as well. The definition of the =Result=
enum is one example:

#+BEGIN_SRC rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+END_SRC

When you recognize situations in your code with multiple struct or enum
definitions that differ only in the types of the values they hold, you can avoid
duplication by using generic types instead.

** In Method Definitions

We can implement methods on structs and enums and use generic types in their
definitions, too. Below show the =Point<T>= struct we defined before with a
method named =x= implemented on it.

#+BEGIN_SRC rust :tangle src/method1.rs
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

fn main() {
    let p = Point { x: 3, y: 8 };

    println!("p.x = {}", p.x());
}
#+END_SRC

#+BEGIN_SRC sh :results raw
cargo run --bin method1
#+END_SRC

#+RESULTS:
p.x = 3

Here, we've defined a method named =x= on =Point<T>= that returns a reference to
the data in the field =x=.

Note that we have to declare =T= just after =impl= so we can use it to specify
that we're implementing methods on the type =Point<T>=. By declaring =T= as a
generic type after =impl=, Rust can identify that type in the angle brackets in
=Point= is a generic type rather than a concrete type.

We could, for example, implement methods only on =Point<f32>= instances rather
than on =Point<T>= instances with any generic type. In below we use the concrete
type =f32=, meaning we don't declare any types after =impl=.

#+BEGIN_SRC rust
impl Point<f32> {
    fn distance_from_origin(&self) -> f32 {
        (self.x.powi(2) + self.y.powi(2)).sqrt()
    }
}
#+END_SRC

This code means the type =Point<f32>= will have a method named
=distance_from_origin= and other instances of =Point<T>= where =T= is not of
type =f32= will not have this method defined. The method measures how far our
point is from the point at coornates(0.0, 0.0) and uses mathematical operations
that are available only for floating point types.

Generic type parameters in a struct definition aren't always the same as those
you use in that struct's method signatures. For example, the below defines the
method =mixup= on the =Point<T, U>= struct from before. The method takes another
=Point= as a parameter, which might have different types from the =self Point=
we're calling =mixup= on. The method creates a new =Point= instance with the =x=
value from the =self Point= (of type =T=) and the =y= value from the passed-in
=Point= (of type =W=).

#+BEGIN_SRC rust :tangle src/method2.rs
struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y
        }
    }
}

fn main() {
    let p1 = Point { x: 2, y: 9.2 };
    let p2 = Point { x: "hello", y: 'd' };

    let p3 = p1.mixup(p2);

    println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
}
#+END_SRC

In =main=, we've defined a =Point= that has an =i32= for =x= and an =f64= for
=y=. The =p2= variable is a =Point= struct that has a string slice for =x= and a
=char= for =y=. Calling =mixup= on =p1= with the argument =p2= gives us =p3=,
which will have an =i32= for =x=, because =x= came from =p1=. The =p3= variable
will have a =char= for =y=, because =y= came from =p2=. The =println!= macro
call will print ~p3.x = 2, p3.y = d~.

#+BEGIN_SRC sh :results raw
cargo run --bin method2
#+END_SRC

#+RESULTS:
p3.x = 2, p3.y = d

The purpose of this example is to demonstrate a situation in which some generic
parameters are declared with =impl= and some are declared with the method
definition. Here, the generic parameters ~T~ and ~U~ are declared after ~impl~,
because they go with the struct definition. The geneirc parameters ~V~ and ~W~
are declared afer ~fn mixup~, because they're only relevant to the method.

** Performance of Code Using Generics

You might be wondering whether there is a runtime cost when you're using generic
type parameters. The good news is that the Rust implements generics in such a
way that your code doesn't run any slower using generic types than it would with
concrete types.

Rust accomplishes this by performing monomorphization of the code that is using
generics at compile time. /Monomorphization/ is the process of turning generic
code into specific code by filling in the concrete types that are used when
compiled.

In this process, the compiler does the opposite of the steps we used to create
the generic function: the compiler looks at all the places where generic is
called and generates code for the concrete types the generic code is called
with.

Let's look at how this works with an example that uses the standard library's
=Option<T>= enum:

#+BEGIN_SRC rust
let integer = Some(5);
let float = Some(5.0);
#+END_SRC

When Rust compiles this code, it performs monomorphization. During that process,
the compiler reads the values that have been used in ~Option<T>~ instances and
identifies two kinds of ~Option<T>~: one is ~i32~ and the other is ~f64~. As
such, it expands the generic definition with the ~Option<T>~ into ~Option_i32~
and ~Option_f64~, thereby replacing the generic definition with the specific
ones.

The monomorphized version of the code looks like the following. The generic
~Option<T>~ is replaced with the spefic definitions created by the compiler:

#+BEGIN_SRC rust
enum Option_i32 {
    Some(i32),
    None,
}

enum Option_f64 {
    Some(f64),
    None,
}

fn main() {
    let integer = Option_i32::Some(5);
    let float = Option_f64::Some(5.0);
}
#+END_SRC

Because Rust compiles generic code into code that specifies the type in each
instance, we pay no runtime cost for using generics. When the code runs, it
performs just as it would if we had duplicated each definition by hand. The
process of monomorphization makes Rust's generics extremely efficient at
runtime.
