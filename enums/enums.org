* Enums
** The match Control Flow operator
*** Patterns that Bind to Values
#+BEGIN_SRC rust
#[derive(Debug)]
enum UsState {
    Alabama,
    Alaska,
    // --snip--
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        },
    }
}
#+END_SRC
*** Matching with ~Option<T>~
#+BEGIN_SRC rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        Some(i) => Some(i + 1),
        None => None,
    }
}

let five = Some(5);
let six = plus_one(five);
let none = plus_one(None);
#+END_SRC
*** The ~_~ Placeholder
#+BEGIN_SRC rust
let some_u8_value = 0u8;
match some_u8_value {
    1 => println!("one"),
    3 => println!("three"),
    5 => println!("five"),
    7 => println!("seven"),
    _ => (),
}
#+END_SRC
** Concise Control Flow with ~if let~
#+BEGIN_SRC rust
let some_u8_value = Some(0u8);
match some_u8_value {
    Some(3) => println!("three"),
    _ => (),
}

// same as above
if let Some(3) = some_u8_value {
    println!("three");
}
#+END_SRC

#+BEGIN_SRC rust
let mut count = 0;
match coin {
    Coin::Quarter(state) => println!("State quarter from {:?}!", state),
    _ => count += 1,
}

// same as above
if let Coin::Quarter(state) = coin {
    println!("State quarter from {:?}!", state);
} else {
    count += 1;
}
#+END_SRC
