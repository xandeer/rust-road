* Binary search

** Function signature

#+BEGIN_SRC rust :tangle no
fn bin_search<T: PartialOrd>(target: &T, collection: &[T]) -> Option<usize>;
#+END_SRC

** Tests
Rust allows unit tests to be written quite easily by marking a function with the
=#[test]= attribute. We can then use the command =rustc --test= or =cargo test=
to build and execute those tests.

#+BEGIN_SRC rust :tangle src/lib.rs
#[test]
fn test_present() {
    // i32
    assert_eq!(Some(0), bin_search(&0_i32, &[0, 1, 2, 4, 8, 16]));
    assert_eq!(Some(1), bin_search(&1_i32, &[0, 1, 2, 4, 8, 16]));
    assert_eq!(Some(2), bin_search(&2_i32, &[0, 1, 2, 4, 8, 16]));
    assert_eq!(Some(3), bin_search(&4_i32, &[0, 1, 2, 4, 8, 16]));
    assert_eq!(Some(4), bin_search(&8_i32, &[0, 1, 2, 4, 8, 16]));
    assert_eq!(Some(5), bin_search(&16_i32, &[0, 1, 2, 4, 8, 16]));

    // char
    assert_eq!(Some(0), bin_search(&'a', &['a', 'b', 'c']));
    assert_eq!(Some(1), bin_search(&'b', &['a', 'b', 'c']));
    assert_eq!(Some(2), bin_search(&'c', &['a', 'b', 'c']));

    // vector
    assert_eq!(Some(0), bin_search(&0.0, &vec![0.0, 1.0, 2.0]));
    assert_eq!(Some(1), bin_search(&1.0, &vec![0.0, 1.0, 2.0]));
    assert_eq!(Some(2), bin_search(&2.0, &vec![0.0, 1.0, 2.0]));
}
#+END_SRC

And some cases where the target is not part of the slice. We'll include the edge
case of an empty slice here.

#+BEGIN_SRC rust :tangle src/lib.rs
#[test]
fn test_absent() {
    assert_eq!(None, bin_search(&0, &[]));
    assert_eq!(None, bin_search(&0, &[1]));
    assert_eq!(None, bin_search(&2, &[1]));
    assert_eq!(None, bin_search(&0, &[1, 3]));
    assert_eq!(None, bin_search(&2, &[1, 3]));
    assert_eq!(None, bin_search(&5, &[1, 3]));

    assert_eq!(None, bin_search(&3.14, &[]));
    assert_eq!(None, bin_search(&3.14, &[0.0, 1.0, 3.0]));
}
#+END_SRC

** Implementation

Our implementation first needs to establish the bounds of the sub-slice that we
will be examining. Initially, that interval is $[0, N]$ (where $N$ is the number
of elements in the slice).

If at any point the lower bound of the interval equals or exceeds the upper
bound, we break anwe know we haven't found our target; the sub-slice delimited
by those bounds is empty.

The computation of the mid-point uses a small trick to avoid an integer
overflow. The following equations show that his is equivalent to computing the
mid-point naively.

#+BEGIN_LaTex
\begin{align*}
\frac{hi - lo}{2} + lo &= \frac{hi - lo}{2} + \frac{2\times lo}{2} \\
&= \frac{hi - lo + 2\times lo}{2} \\
&= \frac{ha + lo}{2}
\end{align*}
#+END_LaTex

If the target is found, we perform an early return, otherwise we update the
interval's bounds: if the target is contained in the lower half of the slice, we
modify the bounds to be $[lo, m)$, otherwise the new bounds are $[m+1, hi)$.

#+BEGIN_SRC rust :tangle src/lib.rs
pub fn bin_search<T: PartialOrd>(target: &T, collection: &[T]) -> Option<usize> {
    let mut lo: usize = 0;
    let mut hi: usize = collection.len();

    while lo < hi {
        let m: usize = (hi - lo) / 2 + lo;

        if *target == collection[m] {
            return Some(m);
        } else if *target < collection[m] {
            hi = m;
        } else {
            lo = m + 1;
        }
    }

    return None;
}
#+END_SRC

Run test with =cargo test=.

#+BEGIN_SRC sh :results raw
cargo test
#+END_SRC

#+RESULTS:

running 2 tests
test test_absent ... ok
test test_present ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

** Call it in main
#+BEGIN_SRC rust :tangle src/main.rs
use literate::bin_search;

fn main() {
    let target = 'a';
    let collection = ['a', 'b', 'c'];

    println!("Target: {}", target);
    print!("Collection: ");
    for i in 0..collection.len() {
        print!("{}, ", collection[i]);
    }
    println!("");

    match bin_search(&target, &collection) {
        Some(i) => println!("Result: {}", collection[i]),
        None => println!("Not found")
    }
}
#+END_SRC

Run with =cargo run=.

#+BEGIN_SRC sh :results raw
cargo run
#+END_SRC

#+RESULTS:
Target: a
Collection: a, b, c,
Result: a

** Tangle

We will call =org-bable-tangle-file= to generate =binsearch.rs= in current
workplace. It's default key binding is =C-c C-v f=.

#+BEGIN_SRC elisp :tangle no :results none
(org-babel-tangle-file buffer-file-name)
#+END_SRC

